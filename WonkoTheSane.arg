@doc(brief="Basic information about a version, without actual resource data")
struct WonkoVersionBrief {
	@doc(brief="A human-readable version string. Can be anything, but semver-like versioning (X.Y.Z) is highly encouraged",
		extended="This should ALWAYS correspond to the real version name of the release of this package version so that it can be used for bugreporting etc.")
	version String;

	@doc("A human readable string describing the release type of this version, like 'alpha', 'beta', 'RC', 'stable', 'dev' or similar")
	type String;

	@doc(brief="A UNIX timestamp (number of seconds since 1970-01-01 00:00:00 UTC) of when this version was released",
		extended="This number is only used for ordering purposes, but it should be kept as correct as possible. The minimum value choosen is 2000-01-01 00:00:00 UTC to prevent usage of made-up numbers in this field")
	@verification.min(946684800)
	time UInt64;
}

@doc(brief="General information about a package and a list of versions",
"A WonkoFile is the document describing the general metadata about a package, it includes the following things:
* General metadata, like name, description etc.
* A list of versions of the package, including all data required for choosing one, like dependencies etc.")
struct WonkoFile {
	@doc("Consumers use this to determine if/how they should load this document. Newer versions might introduce breaking changes.")
	@verification.fixed(1)
	formatVersion UInt16;

	@doc(brief="A Java-style package identifier (eg. `tld.domain.resource`) for this resource", extended="Needs to be unique within a universe, but should also be rememberable and easily associatable with it's resource")
	@verification(regex="[a-z\.0-9]+", minlength=3)
	uid String;

	@doc("This should be a human readable name of this resource, including proper capitalization etc.")
	@verification.minlength(3)
	name String;

	@doc("A list of all versions in this package, with the data required to choose a version, like sorting information (time), information necessary for dependency resolution etc.")
	versions List<WonkoVersionBrief>;
}

enum RuleAction<UInt8> {
	Allow = 0;
	Disallow = 1;
}

struct OperatingSystemInformation {
	name String;
	arch String;
}

@hidden
struct Rule {
	action RuleAction;
}
struct SidedRule : Rule {
	side String;
}
struct ImplicitRule : Rule {}
struct OsRule : Rule {
	os OperatingSystemInformation;
}
using Rules = List<Variant<SidedRule, OsRule, ImplicitRule>>;

struct DownloadableResource {
	size UInt64;
	@verification(regex="[0-9a-z]*", fixed=64)
	sha256 String;
	url String;
}
@verification.requireeither("url", "mavenBaseUrl")
struct JavaLibrary : DownloadableResource {
	// required in DownloadableResource, optional for JavaLibraries
	@optional
	url String;

	@optional
	mavenBaseUrl String;

	name String;

	rules Rules;
}
struct JavaNative : JavaLibrary {}

struct ResourceGroup {
	rules Rules;

	general.folders Map<String, List<String>>;
	general.launcher String;

	java.libraries List<JavaLibrary>;
	java.natives List<JavaNative>;
	java.mainClass String;

	mc.jarModTarget String;
	mc.assets String;
	mc.arguments String;

}

@doc("The version information, including metadata about from where to download stuff and where to put it")
struct WonkoVersion : WonkoVersionBrief {
	@doc(brief="UID of the parent @WonkoFile, for back-linking and verification")
	@verification(regex="[a-z\.0-9]+", minlength=3)
	uid String;

	@doc("All resource groups of this version")
	data List<ResourceGroup>;
}

/*
 * Copyright 2015 Jan Dalheimer <jan@dalheimer.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
arguments: const std::string &toolversion, const Argonauts::Tool::Enum &enumeration, const Argonauts::Tool::TypeProvider *types, const std::string &headerFilename, const StringVector &acceptedNames, const StringVector &acceptedValues
includes: <string>, "DataTypes.h", "tool/compilers/cpp/TypeProviders.h", "util/StringUtil.h"

// Generated by ProjectArgonauts <%= toolversion %>. DO NOT EDIT!

#include "<%= headerFilename %>"
#include <Argonauts.h>

<% using namespace Argonauts::Util; %>

namespace Argonauts {
namespace Runtime {
template <> HandleParseAction handleParseString<<%= enumeration.name %>>(<%= enumeration.name %> &type, const std::string &val)
{
	if (false) {}
	<% for (const Argonauts::Tool::EnumEntry &entry : enumeration.entries) { %>
		else if (val == "<%= entry.name %>") { type = <%= enumeration.name %>::<%= entry.name %>; return Argonauts::Runtime::HandleParseAction::Success; }
	<% } %>
	else return Argonauts::Runtime::HandleParseAction(std::string("Invalid entry '") + val + "', expected one of '<%= String::joinStrings(acceptedNames, "', '") %>'");
}
template <> HandleParseAction handleParseInteger<<%= enumeration.name %>>(<%= enumeration.name %> &type, const int64_t val)
{
	switch (val) {
	<% for (const Argonauts::Tool::EnumEntry &entry : enumeration.entries) { %>
	case <%= entry.value %>:
		type = <%= enumeration.name %>::<%= entry.name %>;
		return Argonauts::Runtime::HandleParseAction::Success;
	<% } %>
	default: return Argonauts::Runtime::HandleParseAction(std::string("Invalid entry ") + std::to_string(val) + ", expected one of <%= String::joinStrings(acceptedValues, ", ") %>");
	}
}
}
}

void serialize(const <%= enumeration.name %> data, Argonauts::Runtime::Serializer *serializer)
{
	if (serializer->packedEnums()) {
		switch (data) {
		<% for (const Argonauts::Tool::EnumEntry &entry : enumeration.entries) { %>
			case <%= enumeration.name %>::<%= entry.name %>:
				using Type = <%= types->type(enumeration.type) %>; //< also works if the type consists of several words
				serializer->emitValue(Type(<%= entry.value %>));
				break;
		<% } %>
		}
	} else {
		switch (data) {
		<% for (const Argonauts::Tool::EnumEntry &entry : enumeration.entries) { %>
			case <%= enumeration.name %>::<%= entry.name %>:
				serializer->emitValue(std::string("<%= entry.name %>"));
				break;
		<% } %>
		}
	}
}

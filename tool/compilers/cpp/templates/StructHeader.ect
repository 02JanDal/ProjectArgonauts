/*
 * Copyright 2015 Jan Dalheimer <jan@dalheimer.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
arguments: const std::string &toolversion, const Argonauts::Tool::Struct &structure, const Argonauts::Tool::TypeProvider *types, const std::unordered_set<std::string> &typeHeaders, const StringVector &builderCopyInitList, const StringVector &builderBuildArgList, const StringVector &constructorArgs, const StringVector &constructorInitList
includes: <vector>, <string>, <unordered_set>, "tool/DataTypes.h", "util/StringUtil.h", "tool/compilers/cpp/TypeProviders.h"

// Generated by ProjectArgonauts <%= toolversion %>. DO NOT EDIT!

#pragma once

<% using namespace Argonauts::Util; %>

#include <cstdlib>
<% for (const std::string &header : typeHeaders) { %>
	<% if (header.find(".arg.h") != std::string::npos) { %>
#include "<%= header %>"
	<% } else { %>
#include <<%= header %>>
	<% } %>
<% } %>
#include <Argonauts.h>

namespace Argonauts {
namespace Runtime { class Serializer; }
namespace Util { class SaxSink; }
}

class <%= structure.name %>
{
	friend class <%= structure.name %>SaxSink;
public:
	explicit <%= structure.name %>() {}

	class Builder
	{
	public:
		explicit Builder() {}
		explicit Builder(const <%= structure.name %> &original)
			: <%= String::joinStrings(builderCopyInitList, ", ") %> {}

<% for (const Argonauts::Tool::Attribute &attribute : structure.members) { %>
		inline <%= types->fullType(attribute) %> <%= attribute.name %>() const { return m_<%= attribute.name %>; }
		inline void set_<%= attribute.name %> (const <%= types->fullType(attribute) %> &value) { m_<%= attribute.name %> = value; }
	<% if (attribute.type->name == "List") { %>
		inline void add_<%= attribute.name %>(const <%= types->fullType(attribute.type->templateArguments.front()) %> &value) { m_<%= attribute.name %>.<%= types->listAppendFunction() %>(value); }
		inline <%= types->listIndexType() %> size_<%= attribute.name %>() const { return m_<%= attribute.name %>.<%= types->listSizeFunction() %>(); }
		inline <%= types->fullType(attribute.type->templateArguments.front()) %> getAt_<%= attribute.name %>(const <%= types->listIndexType() %> index) const { return m_<%= attribute.name %>.<%= types->listAtFunction() %>(index); }
	<% } %>
<% } %>

		inline <%= structure.name %> build() const
		{
			verify();
			return <%= structure.name %>(<%= String::joinStrings(builderBuildArgList, ", ") %>);
		}
		inline operator <%= structure.name %>() { return build(); }

		void verify() const;

	private:
	<% for (const Argonauts::Tool::Attribute &attribute : structure.members) { %>
		<%= types->fullType(attribute) %> m_<%= attribute.name %>;
	<% } %>
	};

	void serialize(Argonauts::Runtime::Serializer *serializer) const;

	inline Builder rebuild() const { return Builder(*this); }

<% for (const Argonauts::Tool::Attribute &attribute : structure.members) { %>
	inline <%= types->fullType(attribute) %> <%= attribute.name %>() const { return m_<%= attribute.name %>; }
<% } %>

private:
	inline explicit <%= structure.name %>(<%= String::joinStrings(constructorArgs, ", ")%>)
		: <%= String::joinStrings(constructorInitList, ", ") %> {}

	<% for (const Argonauts::Tool::Attribute &attribute : structure.members) { %>
		<%= types->fullType(attribute) %> m_<%= attribute.name %>;
	<% } %>
};

namespace Argonauts {
namespace Runtime {
template <> HandleParseAction handleParseObject<<%= structure.name %>>(<%= structure.name %> &val);
}
}
